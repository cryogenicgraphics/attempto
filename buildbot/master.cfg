# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("helmsman-server-slave", "pass"),
               BuildSlave("helmsman-server-slave-clang", "pass"),
               BuildSlave("helmsman-server-slave-clang-libc++", "pass"),
               BuildSlave("helmsman-server-slave-fdo", "pass"),
               BuildSlave("helmsman-server-slave-clang-scanbuild", "pass"),
               BuildSlave("cobalt-blue-slave-x64", "pass"),
               BuildSlave("cobalt-blue-slave-arm64", "pass")]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of helmsman-server.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        'gitlab@cryounit6:cobalt-blue/helmsman-server.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300,
        gitbin='git'))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'helmsman-server' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=
                                ["helmsman-server", 
                                 "helmsman-server-clang",
                                 "helmsman-server-clang-libc++",
                                 "helmsman-server-fdo",
                                 "helmsman-server-clang-scanbuild",
                                 "cobalt-blue-x64",
                                 "cobalt-blue-arm64"]))
c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=
                                ["helmsman-server", 
                                 "helmsman-server-clang",
                                 "helmsman-server-clang-libc++",
                                 "helmsman-server-fdo",
                                 "helmsman-server-clang-scanbuild",
                                 "cobalt-blue-x64",
                                 "cobalt-blue-arm64"]))


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps import shell

factory_gcc = BuildFactory()
# check out the source
factory_gcc.addStep(Git(repourl='gitlab@cryounit6:cobalt-blue/helmsman-server.git', mode='incremental'))
factory_gcc.addStep(shell.Compile(command=['scons', '-j 3', '-u', '--without_debuginfo', '--release']))
factory_gcc.addStep(ShellCommand(
        command=['scons', '-j 1', '-u', '--without_debuginfo', '--release', '--check'],
        description = 'testing',
        descriptionDone = 'tests'))

factory_clang = BuildFactory()
# check out the source
factory_clang.addStep(Git(repourl='gitlab@cryounit6:cobalt-blue/helmsman-server.git', mode='incremental'))
factory_clang.addStep(shell.Compile(command=['scons', '-j 3', '-u', '--without_debuginfo', '--release', '--with_clang']))
factory_clang.addStep(ShellCommand(
        command=['scons', '-j 1', '-u', '--without_debuginfo', '--release', '--with_clang', '--check'],
        description = 'testing',
        descriptionDone = 'tests'))

factory_clang_libcpp = BuildFactory()
# check out the source
factory_clang_libcpp.addStep(Git(repourl='gitlab@cryounit6:cobalt-blue/helmsman-server.git', mode='incremental'))
factory_clang_libcpp.addStep(shell.Compile(command=['scons', '-j 3', '-u', '--without_debuginfo', '--release', '--with_clang', '--with_libc++']))
factory_clang_libcpp.addStep(ShellCommand(
        command=['scons', '-j 1', '-u', '--without_debuginfo', '--release', '--with_clang', '--check', '--with_libc++'],
        description = 'testing',
        descriptionDone = 'tests'))

factory_gcc_fdo = BuildFactory()
# check out the source
factory_gcc_fdo.addStep(Git(repourl='gitlab@cryounit6:cobalt-blue/helmsman-server.git', mode='incremental'))
factory_gcc_fdo.addStep(shell.Compile(command=['scons', '-j 3', '-u', '--without_debuginfo', '--release', '--with_fdo_generate']))
factory_gcc_fdo.addStep(ShellCommand(
        command=['scons', '-j 1', '-u', '--without_debuginfo', '--release', '--check', '--with_fdo_generate'],
        description = 'training',
        descriptionDone = 'trained'))
factory_gcc_fdo.addStep(ShellCommand(
        command=['scons', '-j 1', '-u', '--without_debuginfo', '--release', '--clean'],
        description = 'cleaning',
        descriptionDone = 'clean'))
factory_gcc_fdo.addStep(shell.Compile(command=['scons', '-j 3', '-u', '--without_debuginfo', '--release', '--with_fdo_use']))
factory_gcc_fdo.addStep(ShellCommand(
        command=['scons', '-j 1', '-u', '--without_debuginfo', '--release', '--check', '--with_fdo_use'],
        description = 'testing',
        descriptionDone = 'tests'))

factory_clang_scanbuild = BuildFactory()
# check out the source
factory_clang_scanbuild.addStep(Git(repourl='gitlab@cryounit6:cobalt-blue/helmsman-server.git', mode='incremental'))
factory_clang_scanbuild.addStep(ShellCommand(
        command=['scons', '-j 1', '-u', '--clean'],
        description = 'cleaning',
        descriptionDone = 'clean'))
factory_clang_scanbuild.addStep(shell.Compile(command=['scan-build', 'scons', '-j 3', '-u', '--with_scanbuild', '--with_clang']))

factory_x64 = BuildFactory()
# check out the source
factory_x64.addStep(Git(repourl='gitlab@cryounit6:cobalt-blue/helmsman-server.git', mode='incremental'))
factory_x64.addStep(shell.Compile(command=['scons', '-j 2', '-u', '--without_debuginfo', '--release']))
factory_x64.addStep(ShellCommand(
        command=['scons', '-j 1', '-u', '--without_debuginfo', '--release', '--check'],
        description = 'testing',
        descriptionDone = 'tests'))

factory_arm64 = BuildFactory()
# check out the source
factory_arm64.addStep(Git(repourl='gitlab@cryounit6:cobalt-blue/helmsman-server.git', mode='incremental'))
factory_arm64.addStep(shell.Compile(command=['scons', '-j 8', '-u', '--without_debuginfo', '--release']))
factory_arm64.addStep(ShellCommand(
        command=['scons', '-j 8', '-u', '--without_debuginfo', '--release', '--check'],
        description = 'testing',
        descriptionDone = 'tests'))


from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="helmsman-server",
      slavenames=["helmsman-server-slave"],
      factory=factory_gcc))

c['builders'].append(
    BuilderConfig(name="helmsman-server-clang",
      slavenames=["helmsman-server-slave-clang"],
      factory=factory_clang))

c['builders'].append(
    BuilderConfig(name="helmsman-server-clang-libc++",
      slavenames=["helmsman-server-slave-clang-libc++"],
      factory=factory_clang_libcpp))

c['builders'].append(
    BuilderConfig(name="helmsman-server-fdo",
      slavenames=["helmsman-server-slave-fdo"],
      factory=factory_gcc_fdo))

c['builders'].append(
    BuilderConfig(name="helmsman-server-clang-scanbuild",
      slavenames=["helmsman-server-slave-clang-scanbuild"],
      factory=factory_clang_scanbuild))

c['builders'].append(
    BuilderConfig(name="cobalt-blue-x64",
      slavenames=["cobalt-blue-slave-x64"],
      factory=factory_x64))

c['builders'].append(
    BuilderConfig(name="cobalt-blue-arm64",
      slavenames=["cobalt-blue-slave-arm64"],
      factory=factory_arm64))



####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("buildbot","buildbot")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',  # ..or this
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Cobalt Blue"
c['titleURL'] = "http://www.cryogenicraphics.com"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
